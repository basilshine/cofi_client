/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
	"/api/v1/auth/login": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** User login */
		post: {
			parameters: {
				query?: never;
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody: {
				content: {
					"application/json": components["schemas"]["LoginRequest"];
				};
			};
			responses: {
				/** @description Auth response */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						"application/json": components["schemas"]["AuthResponse"];
					};
				};
			};
		};
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/auth/register": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** User registration */
		post: {
			parameters: {
				query?: never;
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody: {
				content: {
					"application/json": components["schemas"]["RegisterRequest"];
				};
			};
			responses: {
				/** @description Auth response */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						"application/json": components["schemas"]["AuthResponse"];
					};
				};
			};
		};
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/auth/me": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Get current user */
		get: {
			parameters: {
				query?: never;
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody?: never;
			responses: never;
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/expenses": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Get expenses */
		get: {
			parameters: {
				query: {
					/** @description User ID */
					user_id: string;
				};
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description List of expenses */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						"application/json": components["schemas"]["Expense"][];
					};
				};
			};
		};
		put?: never;
		/** Create expense */
		post: {
			parameters: {
				query?: never;
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody: {
				content: {
					"application/json": components["schemas"]["Expense"];
				};
			};
			responses: {
				/** @description Expense created */
				201: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						"application/json": components["schemas"]["Expense"];
					};
				};
			};
		};
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/categories": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Get categories */
		get: {
			parameters: {
				query?: never;
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description List of categories */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						"application/json": components["schemas"]["Category"][];
					};
				};
			};
		};
		put?: never;
		/** Create category */
		post: {
			parameters: {
				query?: never;
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody: {
				content: {
					"application/json": components["schemas"]["Category"];
				};
			};
			responses: {
				/** @description Category created */
				201: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						"application/json": components["schemas"]["Category"];
					};
				};
			};
		};
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/recurring": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Get recurring expenses */
		get: {
			parameters: {
				query: {
					/** @description User ID */
					user_id: string;
				};
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description List of recurring expenses */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						"application/json": components["schemas"]["RecurringExpense"][];
					};
				};
			};
		};
		put?: never;
		/** Create recurring expense */
		post: {
			parameters: {
				query?: never;
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody: {
				content: {
					"application/json": components["schemas"]["RecurringExpense"];
				};
			};
			responses: {
				/** @description Recurring expense created */
				201: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						"application/json": components["schemas"]["RecurringExpense"];
					};
				};
			};
		};
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/notifications": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Get notifications */
		get: {
			parameters: {
				query?: {
					/** @description Notification status */
					status?: string;
				};
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description List of notifications */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						"application/json": components["schemas"]["Notification"][];
					};
				};
			};
		};
		put?: never;
		/** Create notification */
		post: {
			parameters: {
				query?: never;
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody: {
				content: {
					"application/json": components["schemas"]["Notification"];
				};
			};
			responses: {
				/** @description Notification created */
				201: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						"application/json": components["schemas"]["Notification"];
					};
				};
			};
		};
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/notifications/{id}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		/** Update notification status */
		put: {
			parameters: {
				query?: never;
				header?: never;
				path: {
					/** @description Notification ID */
					id: string;
				};
				cookie?: never;
			};
			requestBody: {
				content: {
					"application/json": {
						status?: string;
					};
				};
			};
			responses: {
				/** @description Notification updated */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content?: never;
				};
			};
		};
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/reminders": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Get reminders */
		get: {
			parameters: {
				query?: {
					/** @description Reminder time (HH:MM) */
					time?: string;
				};
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description List of reminders */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						"application/json": components["schemas"]["Reminder"][];
					};
				};
			};
		};
		put?: never;
		/** Create reminder */
		post: {
			parameters: {
				query?: never;
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody: {
				content: {
					"application/json": components["schemas"]["Reminder"];
				};
			};
			responses: {
				/** @description Reminder created */
				201: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						"application/json": components["schemas"]["Reminder"];
					};
				};
			};
		};
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/analytics/stats/summary": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Get analytics summary */
		get: {
			parameters: {
				query: {
					/** @description User ID */
					user_id: string;
					/** @description Period (week, month) */
					period?: string;
				};
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description Analytics summary */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						"application/json": components["schemas"]["AnalyticsSummary"];
					};
				};
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/auth/refresh": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** Refresh JWT token */
		post: {
			parameters: {
				query?: never;
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody: {
				content: {
					"application/json": {
						refreshToken?: string;
					};
				};
			};
			responses: {
				/** @description Auth response */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						"application/json": components["schemas"]["AuthResponse"];
					};
				};
			};
		};
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/auth/telegram/login": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** Telegram login */
		post: {
			parameters: {
				query?: never;
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody: {
				content: {
					"application/json": components["schemas"]["TelegramLoginRequest"];
				};
			};
			responses: {
				/** @description Auth response */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						"application/json": components["schemas"]["AuthResponse"];
					};
				};
			};
		};
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/auth/telegram/update": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** Telegram update */
		post: {
			parameters: {
				query?: never;
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody: {
				content: {
					"application/json": components["schemas"]["TelegramUpdateRequest"];
				};
			};
			responses: {
				/** @description Auth response */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						"application/json": components["schemas"]["AuthResponse"];
					};
				};
			};
		};
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/auth/telegram": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** Telegram WebApp login */
		post: {
			parameters: {
				query?: never;
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody: {
				content: {
					"application/json": components["schemas"]["TelegramWebAppLoginRequest"];
				};
			};
			responses: {
				/** @description Auth response */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						"application/json": components["schemas"]["AuthResponse"];
					};
				};
			};
		};
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/auth/sync": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** Sync Telegram user */
		post: {
			parameters: {
				query?: never;
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody: {
				content: {
					"application/json": components["schemas"]["SyncUserRequest"];
				};
			};
			responses: {
				/** @description Auth response */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						"application/json": components["schemas"]["AuthResponse"];
					};
				};
			};
		};
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/auth/password/reset": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** Request password reset */
		post: {
			parameters: {
				query?: never;
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody: {
				content: {
					"application/json": components["schemas"]["ResetPasswordRequest"];
				};
			};
			responses: {
				/** @description Password reset request response */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						"application/json": {
							message?: string;
						};
					};
				};
			};
		};
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/auth/password/reset/confirm": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** Confirm password reset */
		post: {
			parameters: {
				query?: never;
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody: {
				content: {
					"application/json": components["schemas"]["ResetPasswordConfirmRequest"];
				};
			};
			responses: {
				/** @description Password reset confirmation response */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						"application/json": {
							message?: string;
						};
					};
				};
			};
		};
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/parser": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** Parse text to extract expenses */
		post: {
			parameters: {
				query?: never;
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody: {
				content: {
					"application/json": components["schemas"]["ParseRequest"];
				};
			};
			responses: {
				/** @description Parse result */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						"application/json": components["schemas"]["ParseResult"];
					};
				};
			};
		};
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/parser/image": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** Parse image to extract expenses */
		post: {
			parameters: {
				query?: never;
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody: {
				content: {
					"multipart/form-data": {
						user_id?: string;
						/** Format: binary */
						image?: string;
						prompt?: string;
					};
				};
			};
			responses: {
				/** @description Parse result */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						"application/json": components["schemas"]["ParseResult"];
					};
				};
			};
		};
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/finances/expenses": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Get all expenses */
		get: {
			parameters: {
				query?: never;
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description List of expenses */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						"application/json": components["schemas"]["Expense"][];
					};
				};
			};
		};
		put?: never;
		/** Create a new expense */
		post: {
			parameters: {
				query?: never;
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody: {
				content: {
					"application/json": components["schemas"]["Expense"];
				};
			};
			responses: {
				/** @description Expense created */
				201: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						"application/json": components["schemas"]["Expense"];
					};
				};
			};
		};
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/finances/expenses/{id}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Get expense by ID */
		get: {
			parameters: {
				query?: never;
				header?: never;
				path: {
					/** @description Expense ID */
					id: number;
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description Expense */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						"application/json": components["schemas"]["Expense"];
					};
				};
			};
		};
		/** Update expense by ID */
		put: {
			parameters: {
				query?: never;
				header?: never;
				path: {
					/** @description Expense ID */
					id: number;
				};
				cookie?: never;
			};
			requestBody: {
				content: {
					"application/json": components["schemas"]["Expense"];
				};
			};
			responses: {
				/** @description Updated expense */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						"application/json": components["schemas"]["Expense"];
					};
				};
			};
		};
		post?: never;
		/** Delete expense by ID */
		delete: {
			parameters: {
				query?: never;
				header?: never;
				path: {
					/** @description Expense ID */
					id: number;
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description Expense deleted */
				204: {
					headers: {
						[name: string]: unknown;
					};
					content?: never;
				};
			};
		};
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/finances/expenses/summary": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Get expense summary */
		get: {
			parameters: {
				query?: never;
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description Expense summary */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						"application/json": components["schemas"]["ExpenseSummary"];
					};
				};
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/finances/expenses/approve": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** Approve expenses */
		post: {
			parameters: {
				query?: never;
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody: {
				content: {
					"application/json": components["schemas"]["ApproveExpensesRequest"];
				};
			};
			responses: {
				/** @description Approval result */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						"application/json": {
							message?: string;
						};
					};
				};
			};
		};
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/finances/expenses/cancel": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** Cancel draft expenses */
		post: {
			parameters: {
				query?: never;
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody: {
				content: {
					"application/json": components["schemas"]["CancelDraftExpensesRequest"];
				};
			};
			responses: {
				/** @description Cancel result */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						"application/json": {
							message?: string;
						};
					};
				};
			};
		};
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/finances/expenses/text": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** Create expense from text */
		post: {
			parameters: {
				query?: never;
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody: {
				content: {
					"application/json": {
						text?: string;
					};
				};
			};
			responses: {
				/** @description Expense created from text */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						"application/json": components["schemas"]["Expense"];
					};
				};
			};
		};
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/finances/expenses/voice": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** Create expense from voice */
		post: {
			parameters: {
				query?: never;
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody: {
				content: {
					"multipart/form-data": {
						user_id?: string;
						/** Format: binary */
						voice?: string;
						transcribe_only?: boolean;
					};
				};
			};
			responses: {
				/** @description Expense created from voice */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						"application/json": components["schemas"]["Expense"];
					};
				};
			};
		};
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/finances/expenses/tags": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Get user tags */
		get: {
			parameters: {
				query?: {
					/** @description Language code */
					language?: string;
				};
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description List of tags */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						"application/json": components["schemas"]["Tag"][];
					};
				};
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/finances/expenses/most-used-categories": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Get most used categories */
		get: {
			parameters: {
				query?: never;
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description List of categories */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						"application/json": components["schemas"]["Category"][];
					};
				};
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/finances/expenses/most-used-tags": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Get most used tags */
		get: {
			parameters: {
				query?: never;
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description List of tags */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						"application/json": components["schemas"]["Tag"][];
					};
				};
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/finances/categories": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Get all categories */
		get: {
			parameters: {
				query?: never;
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description List of categories */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						"application/json": components["schemas"]["Category"][];
					};
				};
			};
		};
		put?: never;
		/** Create a new category */
		post: {
			parameters: {
				query?: never;
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody: {
				content: {
					"application/json": components["schemas"]["Category"];
				};
			};
			responses: {
				/** @description Category created */
				201: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						"application/json": components["schemas"]["Category"];
					};
				};
			};
		};
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/finances/categories/{id}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Get category by ID */
		get: {
			parameters: {
				query?: never;
				header?: never;
				path: {
					/** @description Category ID */
					id: number;
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description Category */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						"application/json": components["schemas"]["Category"];
					};
				};
			};
		};
		/** Update category by ID */
		put: {
			parameters: {
				query?: never;
				header?: never;
				path: {
					/** @description Category ID */
					id: number;
				};
				cookie?: never;
			};
			requestBody: {
				content: {
					"application/json": components["schemas"]["Category"];
				};
			};
			responses: {
				/** @description Updated category */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						"application/json": components["schemas"]["Category"];
					};
				};
			};
		};
		post?: never;
		/** Delete category by ID */
		delete: {
			parameters: {
				query?: never;
				header?: never;
				path: {
					/** @description Category ID */
					id: number;
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description Category deleted */
				204: {
					headers: {
						[name: string]: unknown;
					};
					content?: never;
				};
			};
		};
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/finances/recurring": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Get all recurring expenses */
		get: {
			parameters: {
				query?: never;
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description List of recurring expenses */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						"application/json": components["schemas"]["RecurringExpense"][];
					};
				};
			};
		};
		put?: never;
		/** Create a new recurring expense */
		post: {
			parameters: {
				query?: never;
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody: {
				content: {
					"application/json": components["schemas"]["RecurringExpense"];
				};
			};
			responses: {
				/** @description Recurring expense created */
				201: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						"application/json": components["schemas"]["RecurringExpense"];
					};
				};
			};
		};
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/finances/recurring/{id}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Get recurring expense by ID */
		get: {
			parameters: {
				query?: never;
				header?: never;
				path: {
					/** @description Recurring expense ID */
					id: number;
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description Recurring expense */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						"application/json": components["schemas"]["RecurringExpense"];
					};
				};
			};
		};
		/** Update recurring expense by ID */
		put: {
			parameters: {
				query?: never;
				header?: never;
				path: {
					/** @description Recurring expense ID */
					id: number;
				};
				cookie?: never;
			};
			requestBody: {
				content: {
					"application/json": components["schemas"]["RecurringExpense"];
				};
			};
			responses: {
				/** @description Updated recurring expense */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						"application/json": components["schemas"]["RecurringExpense"];
					};
				};
			};
		};
		post?: never;
		/** Delete recurring expense by ID */
		delete: {
			parameters: {
				query?: never;
				header?: never;
				path: {
					/** @description Recurring expense ID */
					id: number;
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description Recurring expense deleted */
				204: {
					headers: {
						[name: string]: unknown;
					};
					content?: never;
				};
			};
		};
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/analytics/stats/week": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Get weekly analytics stats */
		get: {
			parameters: {
				query: {
					/** @description User ID */
					user_id: string;
				};
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description Analytics summary */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						"application/json": components["schemas"]["AnalyticsSummary"];
					};
				};
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/analytics/stats/month": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Get monthly analytics stats */
		get: {
			parameters: {
				query: {
					/** @description User ID */
					user_id: string;
				};
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description Analytics summary */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						"application/json": components["schemas"]["AnalyticsSummary"];
					};
				};
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/analytics/stats/emotions": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Get emotion analytics stats */
		get: {
			parameters: {
				query: {
					/** @description User ID */
					user_id: string;
				};
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description Emotion stats */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						"application/json": {
							emotions?: Record<string, never>;
							most_common?: string;
							regret_amount?: number;
						};
					};
				};
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/analytics/reports": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Get all report schedules */
		get: {
			parameters: {
				query?: never;
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description List of report schedules */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						"application/json": components["schemas"]["ReportSchedule"][];
					};
				};
			};
		};
		put?: never;
		/** Create a new report schedule */
		post: {
			parameters: {
				query?: never;
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody: {
				content: {
					"application/json": components["schemas"]["ReportSchedule"];
				};
			};
			responses: {
				/** @description Report schedule created */
				201: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						"application/json": components["schemas"]["ReportSchedule"];
					};
				};
			};
		};
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/analytics/reports/schedule": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** Schedule a report */
		post: {
			parameters: {
				query?: never;
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody: {
				content: {
					"application/json": components["schemas"]["ReportSchedule"];
				};
			};
			responses: {
				/** @description Report schedule created */
				201: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						"application/json": components["schemas"]["ReportSchedule"];
					};
				};
			};
		};
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/notify/reminders": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Get all reminders */
		get: {
			parameters: {
				query?: never;
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description List of reminders */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						"application/json": components["schemas"]["Reminder"][];
					};
				};
			};
		};
		put?: never;
		/** Create a new reminder */
		post: {
			parameters: {
				query?: never;
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody: {
				content: {
					"application/json": components["schemas"]["Reminder"];
				};
			};
			responses: {
				/** @description Reminder created */
				201: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						"application/json": components["schemas"]["Reminder"];
					};
				};
			};
		};
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/notify/reminders/{id}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Get reminder by ID */
		get: {
			parameters: {
				query?: never;
				header?: never;
				path: {
					/** @description Reminder ID */
					id: number;
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description Reminder */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						"application/json": components["schemas"]["Reminder"];
					};
				};
			};
		};
		/** Update reminder by ID */
		put: {
			parameters: {
				query?: never;
				header?: never;
				path: {
					/** @description Reminder ID */
					id: number;
				};
				cookie?: never;
			};
			requestBody: {
				content: {
					"application/json": components["schemas"]["Reminder"];
				};
			};
			responses: {
				/** @description Updated reminder */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						"application/json": components["schemas"]["Reminder"];
					};
				};
			};
		};
		post?: never;
		/** Delete reminder by ID */
		delete: {
			parameters: {
				query?: never;
				header?: never;
				path: {
					/** @description Reminder ID */
					id: number;
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description Reminder deleted */
				204: {
					headers: {
						[name: string]: unknown;
					};
					content?: never;
				};
			};
		};
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/notify/notifications": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Get all notifications */
		get: {
			parameters: {
				query?: never;
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description List of notifications */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						"application/json": components["schemas"]["Notification"][];
					};
				};
			};
		};
		put?: never;
		/** Create a new notification */
		post: {
			parameters: {
				query?: never;
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody: {
				content: {
					"application/json": components["schemas"]["Notification"];
				};
			};
			responses: {
				/** @description Notification created */
				201: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						"application/json": components["schemas"]["Notification"];
					};
				};
			};
		};
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/notify/notifications/{id}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Get notification by ID */
		get: {
			parameters: {
				query?: never;
				header?: never;
				path: {
					/** @description Notification ID */
					id: number;
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description Notification */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						"application/json": components["schemas"]["Notification"];
					};
				};
			};
		};
		/** Update notification by ID */
		put: {
			parameters: {
				query?: never;
				header?: never;
				path: {
					/** @description Notification ID */
					id: number;
				};
				cookie?: never;
			};
			requestBody: {
				content: {
					"application/json": components["schemas"]["Notification"];
				};
			};
			responses: {
				/** @description Updated notification */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						"application/json": components["schemas"]["Notification"];
					};
				};
			};
		};
		post?: never;
		/** Delete notification by ID */
		delete: {
			parameters: {
				query?: never;
				header?: never;
				path: {
					/** @description Notification ID */
					id: number;
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description Notification deleted */
				204: {
					headers: {
						[name: string]: unknown;
					};
					content?: never;
				};
			};
		};
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
}
export type webhooks = Record<string, never>;
export interface components {
	schemas: {
		LoginRequest: {
			email?: string;
			password?: string;
		};
		RegisterRequest: {
			email?: string;
			password?: string;
			name?: string;
			country?: string;
			language?: string;
		};
		AuthResponse: {
			token?: string;
			refreshToken?: string;
			user?: components["schemas"]["User"];
		};
		User: {
			/** Format: int64 */
			id?: number;
			email?: string;
			name?: string;
			auth_type?: string;
			/** Format: int64 */
			telegramId?: number;
			telegramUsername?: string;
			telegramPhotoUrl?: string;
			country?: string;
			language?: string;
			timezone?: string;
			currency?: string;
			dateFormat?: string;
			emailNotifications?: boolean;
			darkMode?: boolean;
		};
		Category: {
			/** Format: int64 */
			id?: number;
			name?: string;
			color?: string;
			icon?: string;
			/** Format: int64 */
			parentId?: number;
			description?: string;
		};
		ExpenseItem: {
			/** Format: int64 */
			id?: number;
			/** Format: int64 */
			expenseId?: number;
			amount?: number;
			name?: string;
			/** Format: int64 */
			categoryId?: number;
			category?: components["schemas"]["Category"];
			emotion?: string;
			tags?: components["schemas"]["Tag"][];
			/** Format: date-time */
			expenseDate?: string;
			isRecurring?: boolean;
			interval?: string;
		};
		Tag: {
			/** Format: int64 */
			id?: number;
			/** Format: int64 */
			userId?: number;
			name?: string;
			color?: string;
			language?: string;
		};
		Expense: {
			/** Format: int64 */
			id?: number;
			/** Format: int64 */
			userId?: number;
			amount?: number;
			description?: string;
			status?: string;
			/** Format: date-time */
			createdAt?: string;
			/** Format: date-time */
			updatedAt?: string;
			items?: components["schemas"]["ExpenseItem"][];
		};
		Goal: {
			/** Format: int64 */
			id?: number;
			/** Format: int64 */
			userId?: number;
			target?: number;
			purpose?: string;
			/** Format: date-time */
			targetDate?: string;
			/** Format: date-time */
			createdAt?: string;
			/** Format: date-time */
			updatedAt?: string;
		};
		RecurringExpense: {
			/** Format: int64 */
			id?: number;
			/** Format: int64 */
			userId?: number;
			/** Format: int64 */
			chatId?: number;
			amount?: number;
			name?: string;
			/** Format: int64 */
			categoryId?: number;
			category?: components["schemas"]["Category"];
			/** Format: date-time */
			startDate?: string;
			interval?: string;
			/** Format: date-time */
			nextRun?: string;
		};
		Notification: {
			/** Format: int64 */
			id?: number;
			/** Format: int64 */
			userId?: number;
			/** Format: int64 */
			chatId?: number;
			message?: string;
			type?: string;
			status?: string;
		};
		Reminder: {
			/** Format: int64 */
			id?: number;
			/** Format: int64 */
			userId?: number;
			time?: string;
			message?: string;
			enabled?: boolean;
		};
		AnalyticsSummary: {
			totalExpenses?: number;
			byCategory?: {
				[key: string]: number;
			};
			lastMonth?: number;
			thisMonth?: number;
		};
		/** @enum {string} */
		ReactionType:
			| "like"
			| "dislike"
			| "happy"
			| "sad"
			| "regret"
			| "joy"
			| "neutral";
		TelegramLoginRequest: {
			/** Format: int64 */
			telegramId?: number;
			username?: string;
			firstName?: string;
			lastName?: string;
			photoUrl?: string;
			/** Format: int64 */
			authDate?: number;
			hash?: string;
			country?: string;
			language?: string;
		};
		TelegramUpdateRequest: {
			/** Format: int64 */
			telegramId?: number;
			country?: string;
			language?: string;
		};
		TelegramWebAppLoginRequest: {
			telegramInitData?: string;
			user?: {
				/** Format: int64 */
				id?: number;
				firstName?: string;
				lastName?: string;
				username?: string;
			};
		};
		SyncUserRequest: {
			/** Format: int64 */
			telegramId?: number;
			username?: string;
			country?: string;
			language?: string;
		};
		ResetPasswordRequest: {
			email?: string;
		};
		ResetPasswordConfirmRequest: {
			token?: string;
			password?: string;
		};
		ParseRequest: {
			user_id?: string;
			text?: string;
		};
		ParseResult: {
			intent?: string;
			data?: {
				[key: string]: unknown;
			};
			error?: string;
		};
		ApproveExpensesRequest: {
			user_id?: number;
			expense_id?: number;
		};
		CancelDraftExpensesRequest: {
			user_id?: number;
			expense_id?: number;
		};
		ExpenseSummary: {
			byCategory?: {
				[key: string]: number;
			};
			byTag?: {
				[key: string]: number;
			};
			totalExpenses?: number;
			thisMonth?: number;
			lastMonth?: number;
		};
		ReportSchedule: {
			/** Format: int64 */
			id?: number;
			/** Format: int64 */
			userId?: number;
			/** Format: int64 */
			chatId?: number;
			type?: string;
			/** Format: date-time */
			nextDate?: string;
			format?: string;
		};
	};
	responses: never;
	parameters: never;
	requestBodies: never;
	headers: never;
	pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
